---
import Pagination from "@/components/Pagination.astro";
import Post from "@/components/post.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { markdownify } from "@/lib/utils/textConverter";
import { getEntry, type CollectionEntry } from "astro:content";
const { pagination } = config.settings;

export async function getStaticPaths() {
  const { pagination } = config.settings;
  const posts = await getSinglePage("posts");

  const totalPages = Math.ceil(posts.length / pagination);
  const paths = [...Array(totalPages).keys()].map((i) => ({
    params: {
      slug: (i + 1).toString(),
    },
  }));

  return paths;
}

const { slug } = Astro.params;
const postIndex = (await getEntry(
  "posts",
  "-index"
)) as CollectionEntry<"posts">;
const posts = await getSinglePage("posts");
const sortedPosts: CollectionEntry<"posts">[] = sortByDate(posts);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);
const totalPages = Math.ceil(sortedPosts.length / pagination);
---

<Base>
  <section class="section">
    <div class="container">
      <h1
        class="h2 mb-8 text-center"
        set:html={markdownify(postIndex.data.title || "")}
      />
      <div class="row mb-16">
        {
          currentPosts.map((post) => (
            <div class="mt-16 lg:col-6">
              <Post {...post} />
            </div>
          ))
        }
      </div>
      <Pagination totalPages={totalPages} currentPage={currentPage} />
    </div>
  </section>
</Base>
